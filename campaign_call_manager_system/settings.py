"""
Django settings for campaign_call_manager_system project.

Generated by 'django-admin startproject' using Django 4.2.25.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

import os
from pathlib import Path
from config import Config

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = Config.SECRET_KEY

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = Config.DEBUG

ALLOWED_HOSTS = Config.ALLOWED_HOSTS

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',             # Added DRF
    'django_redis',               # Required for Redis cache backend
    'django_celery_beat',         # Celery Beat scheduler
    'calls',                      # Your core campaign app
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'calls.middleware.CorsMiddleware',  # CORS support
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'calls.middleware.RequestLoggingMiddleware',  # Log all requests
    'calls.middleware.AuthTokenMiddleware',  # X-Auth-Token authentication
    'calls.middleware.ExceptionLoggingMiddleware',  # Log uncaught exceptions
]

ROOT_URLCONF = 'campaign_call_manager_system.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'campaign_call_manager_system.wsgi.application'
ASGI_APPLICATION = 'campaign_call_manager_system.asgi.application'  # For async

# Database (Default: PostgreSQL for production use)
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': Config.POSTGRES_DB,
        'USER': Config.POSTGRES_USER,
        'PASSWORD': Config.POSTGRES_PASSWORD,
        'HOST': Config.POSTGRES_HOST,
        'PORT': Config.POSTGRES_PORT,
        'OPTIONS': {
            # Connection pooling settings
            'connect_timeout': 10,  # Connection timeout in seconds
            'options': '-c statement_timeout=30000',  # 30 second statement timeout
        },
        # Django connection pooling (persistent connections)
        'CONN_MAX_AGE': Config.DB_CONN_MAX_AGE,  # Keep connections alive (0 = close immediately)
        'CONN_HEALTH_CHECKS': Config.DB_CONN_HEALTH_CHECKS,  # Check connection health before using from pool
        # Connection pool size (for production, use pgbouncer for better pooling)
        'ATOMIC_REQUESTS': False,  # Don't wrap every view in transaction (we use explicit transactions)
        'AUTOCOMMIT': True,  # Use autocommit mode
    }
}

# Redis cache backend (for concurrency, deduplication, or fast storage)
CACHES = {
    'default': {
        'BACKEND': 'django_redis.cache.RedisCache',
        'LOCATION': Config.REDIS_URL,
        'OPTIONS': {
            'CLIENT_CLASS': 'django_redis.client.DefaultClient',
            'CONNECTION_POOL_KWARGS': {
                'max_connections': Config.REDIS_MAX_CONNECTIONS,  # Maximum connections in pool
                'retry_on_timeout': True,  # Retry if connection times out
            },
            'SOCKET_CONNECT_TIMEOUT': 5,  # Socket connection timeout
            'SOCKET_TIMEOUT': 5,  # Socket read/write timeout
            'COMPRESSOR': 'django_redis.compressors.zlib.ZlibCompressor',  # Compress large values
            'IGNORE_EXCEPTIONS': False,  # Raise exceptions on Redis errors
        },
        'KEY_PREFIX': 'campaign_call',  # Prefix all cache keys
        'TIMEOUT': 300,  # Default cache timeout (5 minutes)
    }
}

# DRF configuration
REST_FRAMEWORK = {
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.AllowAny',
    ],
    'DEFAULT_RENDERER_CLASSES': [
        'rest_framework.renderers.JSONRenderer',
    ],
    'EXCEPTION_HANDLER': 'calls.exception_handler.custom_exception_handler',
    'NON_FIELD_ERRORS_KEY': 'error',
}

# Password validation
AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

LANGUAGE_CODE = 'en-us'
TIME_ZONE = 'UTC'
USE_I18N = True
USE_TZ = True

# Static files (CSS, JavaScript, Images)
STATIC_URL = 'static/'

# Default primary key field type
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Celery Configuration (uses Redis as broker and result backend)
CELERY_BROKER_URL = os.environ.get('CELERY_BROKER_URL', 'redis://localhost:6379/1')
CELERY_RESULT_BACKEND = os.environ.get('CELERY_RESULT_BACKEND', 'redis://localhost:6379/2')
CELERY_ACCEPT_CONTENT = ['json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'
CELERY_TIMEZONE = 'UTC'
CELERY_TASK_TRACK_STARTED = True
CELERY_TASK_TIME_LIMIT = 30 * 60  # 30 minutes
CELERY_TASK_SOFT_TIME_LIMIT = 25 * 60  # 25 minutes
CELERY_TASK_ACKS_LATE = True  # Task acknowledged after execution
CELERY_WORKER_PREFETCH_MULTIPLIER = 1  # One task at a time per worker
CELERY_TASK_REJECT_ON_WORKER_LOST = True
CELERY_TASK_DEFAULT_RETRY_DELAY = 60  # Retry after 60 seconds
CELERY_TASK_MAX_RETRIES = 3

# Celery Redis Connection Pooling
CELERY_BROKER_CONNECTION_RETRY = True
CELERY_BROKER_CONNECTION_RETRY_ON_STARTUP = True
CELERY_BROKER_CONNECTION_MAX_RETRIES = 10
CELERY_BROKER_POOL_LIMIT = Config.CELERY_BROKER_POOL_LIMIT  # Max connections to broker (Redis DB 1)
CELERY_RESULT_BACKEND_TRANSPORT_OPTIONS = {
    'master_name': None,
    'max_connections': Config.CELERY_BROKER_POOL_LIMIT,  # Max connections to result backend (Redis DB 2)
    'socket_keepalive': True,
    'socket_keepalive_options': {
        1: 1,  # TCP_KEEPIDLE
        2: 1,  # TCP_KEEPINTVL
        3: 3,  # TCP_KEEPCNT
    },
    'retry_on_timeout': True,
    'health_check_interval': 30,  # Check connection health every 30s
}

# Celery Beat Schedule (Periodic Tasks)
from celery.schedules import crontab
from config import Config

# Calculate schedule interval from config
RETRY_INTERVAL_SECONDS = Config.SCHEDULER_INTERVAL_MINUTES * 60
RETRY_EXPIRE_SECONDS = max(RETRY_INTERVAL_SECONDS - 10, 55)  # Expire 10s before next run

CELERY_BEAT_SCHEDULE = {
    'process-retry-calls-periodic': {
        'task': 'calls.periodic_tasks.process_retry_calls',
        'schedule': float(RETRY_INTERVAL_SECONDS),  # Configurable from Config.SCHEDULER_INTERVAL_MINUTES
        'options': {'expires': float(RETRY_EXPIRE_SECONDS)}  # Prevent overlap
    },
    'cleanup-old-metrics-daily': {
        'task': 'calls.periodic_tasks.cleanup_old_metrics',
        'schedule': crontab(hour=2, minute=0),  # Run daily at 2:00 AM
    },
}

# Logging Configuration
LOGS_DIR = BASE_DIR / 'logs'
os.makedirs(LOGS_DIR, exist_ok=True)

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '[{levelname}] {asctime} {name} {module}.{funcName}:{lineno} - {message}',
            'style': '{',
            'datefmt': '%Y-%m-%d %H:%M:%S',
        },
        'simple': {
            'format': '[{levelname}] {asctime} [{module}:{lineno}] - {message}',
            'style': '{',
            'datefmt': '%Y-%m-%d %H:%M:%S',
        },
        'json': {
            'format': '{{"timestamp": "{asctime}", "level": "{levelname}", "logger": "{name}", "module": "{module}", "function": "{funcName}", "line": {lineno}, "message": "{message}"}}',
            'style': '{',
            'datefmt': '%Y-%m-%d %H:%M:%S',
        },
    },
    'filters': {
        'require_debug_true': {
            '()': 'django.utils.log.RequireDebugTrue',
        },
        'require_debug_false': {
            '()': 'django.utils.log.RequireDebugFalse',
        },
    },
    'handlers': {
        'console': {
            'level': 'INFO',
            'class': 'logging.StreamHandler',
            'formatter': 'simple',
        },
        'console_debug': {
            'level': 'DEBUG',
            'filters': ['require_debug_true'],
            'class': 'logging.StreamHandler',
            'formatter': 'verbose',
        },
        'file_info': {
            'level': 'INFO',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': LOGS_DIR / 'app.log',
            'maxBytes': 10485760,  # 10MB
            'backupCount': 10,
            'formatter': 'simple',
        },
        'file_error': {
            'level': 'ERROR',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': LOGS_DIR / 'error.log',
            'maxBytes': 10485760,  # 10MB
            'backupCount': 10,
            'formatter': 'verbose',
        },
    },
    'loggers': {
        # Root logger
        '': {
            'handlers': ['console', 'file_info', 'file_error'],
            'level': 'INFO',
            'propagate': False,
        },
        # Django loggers
        'django': {
            'handlers': ['console', 'file_info'],
            'level': 'INFO',
            'propagate': False,
        },
        'django.request': {
            'handlers': ['console', 'file_error'],
            'level': 'ERROR',
            'propagate': False,
        },
        'django.server': {
            'handlers': ['console'],
            'level': 'INFO',
            'propagate': False,
        },
        # Application loggers - All to app.log
        'calls': {
            'handlers': ['console', 'file_info', 'file_error'],
            'level': 'DEBUG' if DEBUG else 'INFO',
            'propagate': False,
        },
        'calls.views': {
            'handlers': ['console', 'file_info', 'file_error'],
            'level': 'DEBUG' if DEBUG else 'INFO',
            'propagate': False,
        },
        'calls.tasks': {
            'handlers': ['console', 'file_info', 'file_error'],
            'level': 'DEBUG' if DEBUG else 'INFO',
            'propagate': False,
        },
        'calls.utils': {
            'handlers': ['console', 'file_info', 'file_error'],
            'level': 'DEBUG' if DEBUG else 'INFO',
            'propagate': False,
        },
        'calls.periodic_tasks': {
            'handlers': ['console', 'file_info', 'file_error'],
            'level': 'DEBUG' if DEBUG else 'INFO',
            'propagate': False,
        },
    },
}

# Additional production configs can be added as needed
