version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15
    container_name: campaign_postgres
    environment:
      POSTGRES_DB: campaign_db
      POSTGRES_USER: campaign_user
      POSTGRES_PASSWORD: yourpassword
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5433:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U campaign_user -d campaign_db"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - campaign_network

  # Redis (Cache + Celery Broker)
  redis:
    image: redis:7-alpine
    container_name: campaign_redis
    ports:
      - "6380:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - campaign_network

  # Django Web Application
  web:
    build: .
    container_name: campaign_web
    ports:
      - "8000:8000"
    environment:
      - POSTGRES_DB=campaign_db
      - POSTGRES_USER=campaign_user
      - POSTGRES_PASSWORD=yourpassword
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/1
      - CELERY_RESULT_BACKEND=redis://redis:6379/2
      - DJANGO_DEBUG=false
      - MOCK_SERVICE_ENABLED=true
      - EXTERNAL_CALL_SERVICE_URL=http://mock-service:8001
      - X_AUTH_TOKEN=dev-token-12345
      - MAX_CONCURRENT_CALLS=100
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./logs:/app/logs
    command: >
      sh -c "python manage.py migrate &&
             gunicorn --bind 0.0.0.0:8000 --workers 4 --timeout 120 campaign_call_manager_system.wsgi:application"
    restart: unless-stopped
    networks:
      - campaign_network

  # Celery Worker (4 concurrent workers)
  celery_worker:
    build: .
    container_name: campaign_celery_worker
    environment:
      - POSTGRES_DB=campaign_db
      - POSTGRES_USER=campaign_user
      - POSTGRES_PASSWORD=yourpassword
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/1
      - CELERY_RESULT_BACKEND=redis://redis:6379/2
      - DJANGO_DEBUG=false
      - MOCK_SERVICE_ENABLED=true
      - EXTERNAL_CALL_SERVICE_URL=http://mock-service:8001
      - X_AUTH_TOKEN=dev-token-12345
      - MAX_CONCURRENT_CALLS=100
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      web:
        condition: service_started
    volumes:
      - ./logs:/app/logs
    command: celery -A campaign_call_manager_system worker --loglevel=info --concurrency=4
    restart: unless-stopped
    networks:
      - campaign_network

  # Celery Beat (Periodic Task Scheduler)
  celery_beat:
    build: .
    container_name: campaign_celery_beat
    environment:
      - POSTGRES_DB=campaign_db
      - POSTGRES_USER=campaign_user
      - POSTGRES_PASSWORD=yourpassword
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/1
      - CELERY_RESULT_BACKEND=redis://redis:6379/2
      - DJANGO_DEBUG=false
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      web:
        condition: service_started
    volumes:
      - ./logs:/app/logs
    command: celery -A campaign_call_manager_system beat --loglevel=info --scheduler django_celery_beat.schedulers:DatabaseScheduler
    restart: unless-stopped
    networks:
      - campaign_network

  # Mock External Service
  mock-service:
    build: .
    container_name: campaign_mock_service
    ports:
      - "8001:8001"
    environment:
      - FLASK_ENV=development
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/1
    depends_on:
      redis:
        condition: service_healthy
    volumes:
      - ./logs:/app/logs
    command: python mock_service.py
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    networks:
      - campaign_network

volumes:
  postgres_data:
  redis_data:

networks:
  campaign_network:
    driver: bridge
