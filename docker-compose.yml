version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15
    environment:
      POSTGRES_DB: campaign_db
      POSTGRES_USER: campaign_user
      POSTGRES_PASSWORD: yourpassword
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U campaign_user -d campaign_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Zookeeper for Kafka
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    volumes:
      - zookeeper_data:/var/lib/zookeeper/data

  # Kafka Message Broker
  kafka:
    image: confluentinc/cp-kafka:7.4.0
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: true
    volumes:
      - kafka_data:/var/lib/kafka/data
    healthcheck:
      test: ["CMD", "kafka-topics", "--bootstrap-server", "localhost:9092", "--list"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Django Web Application
  web:
    build: .
    ports:
      - "8000:8000"
    environment:
      - POSTGRES_DB=campaign_db
      - POSTGRES_USER=campaign_user
      - POSTGRES_PASSWORD=yourpassword
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - REDIS_URL=redis://redis:6379/1
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - DJANGO_DEBUG=true
      - MOCK_SERVICE_ENABLED=true
      - EXTERNAL_CALL_SERVICE_URL=http://mock-service:8001
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
    volumes:
      - .:/app
      - ./logs:/app/logs
    command: >
      sh -c "python manage.py migrate &&
             python manage.py runserver 0.0.0.0:8000"

  # Kafka Consumers
  consumers:
    build: .
    environment:
      - POSTGRES_DB=campaign_db
      - POSTGRES_USER=campaign_user
      - POSTGRES_PASSWORD=yourpassword
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - REDIS_URL=redis://redis:6379/1
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - DJANGO_DEBUG=true
      - MOCK_SERVICE_ENABLED=true
      - EXTERNAL_CALL_SERVICE_URL=http://mock-service:8001
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
      web:
        condition: service_started
    volumes:
      - .:/app
      - ./logs:/app/logs
    command: python manage.py run_consumers
    restart: unless-stopped

  # Retry Scheduler
  scheduler:
    build: .
    environment:
      - POSTGRES_DB=campaign_db
      - POSTGRES_USER=campaign_user
      - POSTGRES_PASSWORD=yourpassword
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - REDIS_URL=redis://redis:6379/1
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - DJANGO_DEBUG=true
      - SCHEDULER_ENABLED=true
      - SCHEDULER_INTERVAL_MINUTES=1
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
      web:
        condition: service_started
    volumes:
      - .:/app
      - ./logs:/app/logs
    command: python manage.py run_scheduler
    restart: unless-stopped

  # Mock External Service
  mock-service:
    build: .
    ports:
      - "8001:8001"
    environment:
      - FLASK_ENV=development
    volumes:
      - .:/app
    command: python mock_service.py
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_data:
  redis_data:
  kafka_data:
  zookeeper_data:
